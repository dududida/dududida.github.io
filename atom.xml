<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dududida&#39;s blog</title>
  
  
  <link href="https://dududida.github.io/atom.xml" rel="self"/>
  
  <link href="https://dududida.github.io/"/>
  <updated>2023-01-27T08:38:05.099Z</updated>
  <id>https://dududida.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT 6.828</title>
    <link href="https://dududida.github.io/2023/01/08/6.828/"/>
    <id>https://dududida.github.io/2023/01/08/6.828/</id>
    <published>2023-01-08T06:50:06.704Z</published>
    <updated>2023-01-27T08:38:05.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xv6的安装"><a href="#xv6的安装" class="headerlink" title="xv6的安装"></a>xv6的安装</h1><ul><li>条件：Vmware上运行的unbuntu虚拟机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu</span> </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2021</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">cd</span> xv6-labs-2021</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git checkout util</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">make qemu         <span class="comment">##运行xv6</span></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">Ctrl+a x          <span class="comment">##退出xv6</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="关于各种系统调用"><a href="#关于各种系统调用" class="headerlink" title="关于各种系统调用"></a>关于各种系统调用</h1><ul><li>pipe():<code>int pipe(int fds[2]);</code> 在进程的打开文件表中查找前两个可用位置，并将它们分配给管道的读p[0]写p[1]端。</li><li>chdir():<code>int chdir(const char *path);</code> 用于改变当前工作目录，其参数为Path 目标目录（类似于cd）</li></ul><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><ul><li>以下路径都在xv6-labs-2021/下面</li></ul><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>user/目录下新建sleep.c，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;                 <span class="comment">//缺少参数</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="number">2</span>,<span class="string">&quot;miss argument !\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> time;</span><br><span class="line">    time = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(time&lt;<span class="number">0</span>)&#123;                 <span class="comment">//参数不合法 ，实际运行中好像没反应。但是make grade是过了</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="number">2</span>,<span class="string">&quot;invalid argument !\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(time);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开Makefile，在179行找到UPROGS，在其中添加sleep。</p><p>回到xv6-labs-2021/，<code>$ make qemu</code></p><p>测试是否通过，在xv6-labs-2021/目录下：<code>$ ./grade-lab-util sleep</code></p><h2 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h2><p>不加wait，会出现缓冲区冲突，交替写入。</p><p>1.8晚上。自己测试没问题，在进行成绩测试时没通过。</p><p>在多次执行pingpong时，输出的pid依次增加，按理说不应该这样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">        <span class="type">int</span> p1[<span class="number">2</span>];              <span class="comment">//pipe1</span></span><br><span class="line">        <span class="type">int</span> p2[<span class="number">2</span>];              <span class="comment">//pipe2</span></span><br><span class="line">        pipe(p1);</span><br><span class="line">        pipe(p2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> pid;</span><br><span class="line">        <span class="type">char</span> readBuffer[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> rsize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fork()===<span class="number">0</span>)&#123;</span><br><span class="line">                pid = getpid();</span><br><span class="line">                close(p1[<span class="number">1</span>]);</span><br><span class="line">                close(p2[<span class="number">0</span>]);</span><br><span class="line">                write(p2[<span class="number">1</span>],<span class="string">&quot;p&quot;</span>,<span class="number">1</span>);</span><br><span class="line">                rsize = read(p1[<span class="number">0</span>],readBuffer,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(rsize)&#123;</span><br><span class="line">                        <span class="built_in">fprintf</span>(<span class="number">1</span>,<span class="string">&quot;%d:received ping\n&quot;</span>,pid);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pid = getpid();</span><br><span class="line">        close(p1[<span class="number">0</span>]);</span><br><span class="line">        close(p2[<span class="number">1</span>]);</span><br><span class="line">        write(p1[<span class="number">1</span>],<span class="string">&quot;p&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> userStat;</span><br><span class="line">        wait(&amp;userStat);</span><br><span class="line"></span><br><span class="line">        rsize = read(p2[<span class="number">0</span>],readBuffer,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(rsize)&#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="number">1</span>,<span class="string">&quot;%d:received pong\n&quot;</span>,pid);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h2><p>题意：用一堆进程，在他们之间构建pipeline，来构建出一个质数筛选器</p><p>参考资料：Bell Labs and CSP Threads 中描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = get a number from left neighbor</span><br><span class="line">print p</span><br><span class="line">loop:</span><br><span class="line">    n = get a number from left neighbor</span><br><span class="line">    if (p does not divide n)</span><br><span class="line">        send n to right neighbor</span><br></pre></td></tr></table></figure><p>每个进程打印一个质数，并做一次筛选，剩下的通过管道传到下一个进程</p><p><strong>问题在于如何在多个进程间建立起pipeline？</strong></p><p>以下代码参考自<a href="https://zhuanlan.zhihu.com/p/461471188">知乎-渡船-6.s081 2021 lab1 Xv6 and Unix utilities</a></p><ul><li>我们认为进程统一从pipe1得到数据，将剩余数据传入pipe2</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL (int *)0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pipe1[<span class="number">2</span>];</span><br><span class="line">    pipe(pipe1);</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;                       <span class="comment">// 父进程(0)里面</span></span><br><span class="line">        close(pipe1[READ]); <span class="comment">// 关闭父进程的读端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">35</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            write(pipe1[WRITE], &amp;i, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 写入完毕，关闭父进程写端，释放出文件描述符</span></span><br><span class="line">        close(pipe1[WRITE]);</span><br><span class="line">        wait(<span class="literal">NULL</span>); <span class="comment">// 有一个子进程退出，这个父进程即退出</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">// 子进程里面，他们的行为是类似的</span></span><br><span class="line">        <span class="type">int</span> min;</span><br><span class="line">        close(pipe1[WRITE]); <span class="comment">// 关闭写入端</span></span><br><span class="line">        <span class="comment">//注意，这时子进程(0)的状态，与后面所有后代进程进入循环的初始状态一致</span></span><br><span class="line">        <span class="keyword">while</span> (read(pipe1[READ], &amp;min, <span class="keyword">sizeof</span>(<span class="type">int</span>)))</span><br><span class="line">        &#123; <span class="comment">// 能从管道里读出数据，就继续执行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, min);</span><br><span class="line">            <span class="type">int</span> pipe2[<span class="number">2</span>];   <span class="comment">//用于往后传</span></span><br><span class="line">            pipe(pipe2);</span><br><span class="line">            <span class="type">int</span> i;</span><br><span class="line">            <span class="keyword">while</span> (read(pipe1[READ], &amp;i, <span class="keyword">sizeof</span>(<span class="type">int</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % min)</span><br><span class="line">                &#123; <span class="comment">// 除不尽</span></span><br><span class="line">                    write(pipe2[WRITE], &amp;i, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            close(pipe2[WRITE]); <span class="comment">// 向子进程写完了，关闭</span></span><br><span class="line">            <span class="type">int</span> pid2 = fork();   <span class="comment">// 子1再fork</span></span><br><span class="line">            <span class="keyword">if</span> (pid2 == <span class="number">0</span>)</span><br><span class="line">            &#123; <span class="comment">// 子(2)进程里面</span></span><br><span class="line">                pipe1[READ] = dup(pipe2[READ]);     </span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                ！！！</span></span><br><span class="line"><span class="comment">                这里非常关键，这一步将fd[READ]指向pipe2的读端。</span></span><br><span class="line"><span class="comment">                使得后续进程从pipe1里去读时，实际读的是其父进程的pipe2</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                close(pipe2[READ]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                close(pipe2[READ]); </span><br><span class="line">                wait(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">//pipe1销毁，因为已经没有文件描述符指向它</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="./">手写画图模拟执行过程</a></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>以官网例子为例，<code>find . b</code>表示在.目录及其子目录下查找名为b的数据文件。反映在argv[]中，即在名为argv[1]目录及其子目录中查找名为argv[2]的数据文件(这点困扰了我很久)</p><p>难点在于：</p><ul><li>了解LINUX的目录文件的组织结构</li><li>读懂ls.c中的ls()中的代码。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/types.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/stat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;user/user.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;kernel/fs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *fname)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">512</span>], *p; <span class="comment">// buf存的是路径字符串</span></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> <span class="title">de</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(path, <span class="number">0</span>)) &lt; <span class="number">0</span>) <span class="comment">// 打开文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot open %s\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="number">0</span>) <span class="comment">// 把文件中的信息存入结构体st中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;find: cannot stat %s\n&quot;</span>, path);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据fs.h</span></span><br><span class="line"><span class="comment">    Directory is a file containing a sequence of dirent structures.</span></span><br><span class="line"><span class="comment">    即目录文件是一个包含了一系列dirent这个结构体的文件，dirent结构体中有inum和name</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里与ls.c中的区别：不需要switch</span></span><br><span class="line">    <span class="comment">// DIRSIZ在fs.h中定义，大小为14</span></span><br><span class="line">    <span class="comment">// 传入的path即是当前的路径字符串</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(path) + <span class="number">1</span> + DIRSIZ + <span class="number">1</span> &gt; <span class="keyword">sizeof</span> buf)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;find: path too long\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, path); <span class="comment">// 将path复制到buf</span></span><br><span class="line">    p = buf + <span class="built_in">strlen</span>(buf);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是在初始化p指针，将p指向buf的数据的最后。</span></span><br><span class="line"><span class="comment">    buf是数组的起始地址，strlen(buf)是已存放数据的长度。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    *p++ = <span class="string">&#x27;/&#x27;</span>;                                     <span class="comment">// 在后面加上‘/’</span></span><br><span class="line">    <span class="keyword">while</span> (read(fd, &amp;de, <span class="keyword">sizeof</span>(de)) == <span class="keyword">sizeof</span>(de)) <span class="comment">// 读取sizeof(dirent)大小的数据，即一个文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        de.inum==0表示这是一块已经初始化并且可以</span></span><br><span class="line"><span class="comment">        用来创建文件或者文件夹的位置，应当无视这一块空间</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (de.inum == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        memmove(p, de.name, DIRSIZ); <span class="comment">// p就是用于访问buf的指针，往路径后面添加</span></span><br><span class="line">        p[DIRSIZ] = <span class="number">0</span>;               <span class="comment">// 这是在干啥？处理某种潜在的bug</span></span><br><span class="line">        <span class="keyword">if</span> (stat(buf, &amp;st) &lt; <span class="number">0</span>)      <span class="comment">// stat()用于获取文件信息，参数1就是文件路径名</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;find: cannot stat %s\n&quot;</span>, buf);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(de.name, fname) == <span class="number">0</span>) &amp;&amp; (st.type == T_FILE)) <span class="comment">// 数据文件</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((st.type == T_DIR) &amp;&amp; (<span class="built_in">strcmp</span>(<span class="string">&quot;.&quot;</span>, de.name) != <span class="number">0</span>) &amp;&amp; (<span class="built_in">strcmp</span>(<span class="string">&quot;..&quot;</span>, de.name) != <span class="number">0</span>)) <span class="comment">//</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 不能递归. ..</span></span><br><span class="line">            find(buf, fname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Missing parameters\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    find函数的行为：</span></span><br><span class="line"><span class="comment">    在这个目录里面找。</span></span><br><span class="line"><span class="comment">    如果这个目录里面的文件依旧是目录文件，那么递归调用find。</span></span><br><span class="line"><span class="comment">    若为文件文件，则与argv[2]的值比对。若匹配，打印路径。退出。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    find(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;xv6的安装&quot;&gt;&lt;a href=&quot;#xv6的安装&quot; class=&quot;headerlink&quot; title=&quot;xv6的安装&quot;&gt;&lt;/a&gt;xv6的安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;条件：Vmware上运行的unbuntu虚拟机&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="学习记录" scheme="https://dududida.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>摄影学习笔记</title>
    <link href="https://dududida.github.io/2022/03/14/%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://dududida.github.io/2022/03/14/%E6%91%84%E5%BD%B1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-14T09:20:30.285Z</published>
    <updated>2023-01-09T13:34:44.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何减少夜景噪点"><a href="#如何减少夜景噪点" class="headerlink" title="如何减少夜景噪点"></a>如何减少夜景噪点</h2><ol><li>降低iso (最好不要高于400)</li><li>快门速度变慢 (延长曝光时间)</li><li>使用三角架</li></ol><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ol><li>如果其他参数不变，曝光时间越长，照片就越亮</li><li>感光度过高容易产生噪点</li></ol><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>EV(Exposure Value,曝光值)  基本可以理解为EV越高，拍摄环境的亮度越高。(文章链接：<a href="https://zhuanlan.zhihu.com/p/36129603">摄影基础文：什么是EV？</a>)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何减少夜景噪点&quot;&gt;&lt;a href=&quot;#如何减少夜景噪点&quot; class=&quot;headerlink&quot; title=&quot;如何减少夜景噪点&quot;&gt;&lt;/a&gt;如何减少夜景噪点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;降低iso (最好不要高于400)&lt;/li&gt;
&lt;li&gt;快门速度变慢 (延长曝光时</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://dududida.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>电线杆子上的人</title>
    <link href="https://dududida.github.io/2022/03/08/story_1/"/>
    <id>https://dududida.github.io/2022/03/08/story_1/</id>
    <published>2022-03-08T05:42:23.092Z</published>
    <updated>2023-01-09T13:47:01.871Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;电线杆子，一根又一根的电线杆子。电线杆子之间的电线，平行的电线构成了一条直直的，宽敞的道路。<br>&emsp;&emsp;电线杆子上的人就在这样的道路上走着，他们从这里到哪里，他们几乎不休息地走着，他们有时跳跃，有时奔跑。他们偶尔也会停下来，蹲在电线杆子上看着杆子下的人。他们看他们交谈，看他们争吵。<br>&emsp;&emsp;他们真的知道下面的人在讲什么吗？他们不知道，他们是电线杆子上的人，他们只是笑一笑，然后继续向前走去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;电线杆子，一根又一根的电线杆子。电线杆子之间的电线，平行的电线构成了一条直直的，宽敞的道路。&lt;br&gt;&amp;emsp;&amp;emsp;电线杆子上的人就在这样的道路上走着，他们从这里到哪里，他们几乎不休息地走着，他们有时跳跃，有时奔跑。他们偶尔也会停下来，蹲在电</summary>
      
    
    
    
    <category term="杂七杂八" scheme="https://dududida.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
  </entry>
  
</feed>
